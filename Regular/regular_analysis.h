#ifndef GeCSA64_Regular_analysis
#define GeCSA64_Regular_analysis
#include <math.h>

#include <algorithm>
#include <cstring>
#include <forward_list>
#include <iostream>
#include <queue>
#include <set>
#include <string>
#include <unordered_set>
#include <vector>

#include "DFA_analysis/Automata//Automata.h"
#include "DFA_analysis/Parser/BREParser.h"
#include "DFA_analysis/util/Set.h"

#define arrsize 256 / 64

#pragma once
namespace Regular {
static const long unsigned int table1[65] = {
    0x7FFFFFFFFFFFFFFF, 0xBFFFFFFFFFFFFFFF, 0xDFFFFFFFFFFFFFFF, 0xEFFFFFFFFFFFFFFF, 0xF7FFFFFFFFFFFFFF,
    0xFBFFFFFFFFFFFFFF, 0xFDFFFFFFFFFFFFFF, 0xFEFFFFFFFFFFFFFF, 0xFF7FFFFFFFFFFFFF, 0xFFBFFFFFFFFFFFFF,
    0xFFDFFFFFFFFFFFFF, 0xFFEFFFFFFFFFFFFF, 0xFFF7FFFFFFFFFFFF, 0xFFFBFFFFFFFFFFFF, 0xFFFDFFFFFFFFFFFF,
    0xFFFEFFFFFFFFFFFF, 0xFFFF7FFFFFFFFFFF, 0xFFFFBFFFFFFFFFFF, 0xFFFFDFFFFFFFFFFF, 0xFFFFEFFFFFFFFFFF,
    0xFFFFF7FFFFFFFFFF, 0xFFFFFBFFFFFFFFFF, 0xFFFFFDFFFFFFFFFF, 0xFFFFFEFFFFFFFFFF, 0xFFFFFF7FFFFFFFFF,
    0xFFFFFFBFFFFFFFFF, 0xFFFFFFDFFFFFFFFF, 0xFFFFFFEFFFFFFFFF, 0xFFFFFFF7FFFFFFFF, 0xFFFFFFFBFFFFFFFF,
    0xFFFFFFFDFFFFFFFF, 0xFFFFFFFEFFFFFFFF, 0xFFFFFFFF7FFFFFFF, 0xFFFFFFFFBFFFFFFF, 0xFFFFFFFFDFFFFFFF,
    0xFFFFFFFFEFFFFFFF, 0xFFFFFFFFF7FFFFFF, 0xFFFFFFFFFBFFFFFF, 0xFFFFFFFFFDFFFFFF, 0xFFFFFFFFFEFFFFFF,
    0xFFFFFFFFFF7FFFFF, 0xFFFFFFFFFFBFFFFF, 0xFFFFFFFFFFDFFFFF, 0xFFFFFFFFFFEFFFFF, 0xFFFFFFFFFFF7FFFF,
    0xFFFFFFFFFFFBFFFF, 0xFFFFFFFFFFFDFFFF, 0xFFFFFFFFFFFEFFFF, 0xFFFFFFFFFFFF7FFF, 0xFFFFFFFFFFFFBFFF,
    0xFFFFFFFFFFFFDFFF, 0xFFFFFFFFFFFFEFFF, 0xFFFFFFFFFFFFF7FF, 0xFFFFFFFFFFFFFBFF, 0xFFFFFFFFFFFFFDFF,
    0xFFFFFFFFFFFFFEFF, 0xFFFFFFFFFFFFFF7F, 0xFFFFFFFFFFFFFFBF, 0xFFFFFFFFFFFFFFDF, 0xFFFFFFFFFFFFFFEF,
    0xFFFFFFFFFFFFFFF7, 0xFFFFFFFFFFFFFFFB, 0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFE, 0};

static const long unsigned int table2[65] = {

    0x8000000000000000, 0x4000000000000000, 0x2000000000000000, 0x1000000000000000, 0x0800000000000000,
    0x0400000000000000, 0x0200000000000000, 0x0100000000000000, 0x0080000000000000, 0x0040000000000000,
    0x0020000000000000, 0x0010000000000000, 0x0008000000000000, 0x0004000000000000, 0x0002000000000000,
    0x0001000000000000, 0x0000800000000000, 0x0000400000000000, 0x0000200000000000, 0x0000100000000000,
    0x0000080000000000, 0x0000040000000000, 0x0000020000000000, 0x0000010000000000, 0x0000008000000000,
    0x0000004000000000, 0x0000002000000000, 0x0000001000000000, 0x0000000800000000, 0x0000000400000000,
    0x0000000200000000, 0x0000000100000000, 0x0000000080000000, 0x0000000040000000, 0x0000000020000000,
    0x0000000010000000, 0x0000000008000000, 0x0000000004000000, 0x0000000002000000, 0x0000000001000000,
    0x0000000000800000, 0x0000000000400000, 0x0000000000200000, 0x0000000000100000, 0x0000000000080000,
    0x0000000000040000, 0x0000000000020000, 0x0000000000010000, 0x0000000000008000, 0x0000000000004000,
    0x0000000000002000, 0x0000000000001000, 0x0000000000000800, 0x0000000000000400, 0x0000000000000200,
    0x0000000000000100, 0x0000000000000080, 0x0000000000000040, 0x0000000000000020, 0x0000000000000010,
    0x0000000000000008, 0x0000000000000004, 0x0000000000000002, 0x0000000000000001, 0};

class Parser {
public:
    explicit Parser(const char *regular_expression);
    void Show_TransMatrix();
    ~Parser();

public:
    std::vector<std::vector<int32_t>> Transition_Matrix;

    std::vector<int64_t *> Bitarray;

    int32_t State_num; // DFA状态数
    int32_t start;     // 起始状态
    int32_t end;       // 终止状态
};
}; // namespace Regular

#endif